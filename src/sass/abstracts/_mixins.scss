// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

$theme-map: null;
// BreakpointManager
@mixin respond-to($breakpoint) {
    $raw-query: map-get($breakpoints, $breakpoint);
    @if $raw-query {
      $query: if(
        type-of($raw-query) == 'string',
        unquote($raw-query),
        inspect($raw-query)
      );

      // @debug "checfdk: #{$query}"; //string 
      // @debug type-of($raw-query);
      // @debug $raw-query;

      @media #{$query} {
        @content;
      }
    } @else {
      @error 'No value found for `#{$breakpoint}`. '
           + 'Please make sure it is defined in `$breakpoints` map.';
    }
  }
  
  /* In the above piece of code we have used mixin. Mixin is something which takes value from includes.
    here our mixin name is respond-to, include requires the name reference to send value to minin

    1) Raw Query is a variable which is storing mapped breakpoints from include
    2) ln:8 is a if statement which is taking raw-query and i. converting the mapped value to string ii. removing quotes form raw query iii. represents the value in string
    3) some debugging has been shown with the debug command
    4) the converted raw query is stored in query variable and sent in media queries
    5) a conditional statement has been put if the given breakpoint include does not exist and also an error is thrown
  */

  // ThemeMixin

  // https://sass-lang.com/documentation/at-rules/control/each#with-maps
  $text--light: black;
  $text--dark: white;
  $bg--light: white;
  $bg--dark: black;

  $themes: (
          light: (
                  bg: $light-background,
                  text: $light-text,
          ),
          dark: (
                  bg: $dark-background,
                  text: $dark-text,
          ),
  );
  
  @mixin themed() {
    @each $theme, $map in $themes {
      .theme--#{$theme} & {
        @debug $theme;
        $theme-map: () !global;
        @each $key, $submap in $map {
          
          $value: map-get(map-get($themes, $theme), '#{$key}');
          @debug $value;
          $theme-map: map-merge($theme-map, ($key: $value)) !global;
          @debug $theme-map;
        }
        @content;
        $theme-map: null !global;
      }
    }
  }

  
@function t($key) {
  @return map-get($theme-map, $key);
}


  .myClass {
    font-family: sans-serif;
  
    @include themed() {
      color: time('text');
      background: time('bg');
    }
  }
  